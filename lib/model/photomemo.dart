enum CameraOrGallery {
  camera,
  gallery,
}

enum DocKeyPhotoMemo {
  title,
  memo,
  createdBy,
  photoFilename,
  photoURL,
  timestamp,
  sharedWith
}

class PhotoMemo {
  String? docId; //generated by Firestore
  String createdBy; //email
  String title;
  String memo;
  String photoFilename;
  String photoURL; //given by Storage
  DateTime? timestamp;
  late List<dynamic> sharedWith;

  PhotoMemo({
    this.docId,
    required this.createdBy,
    required this.title,
    required this.memo,
    required this.photoFilename,
    required this.photoURL,
    this.timestamp,
    List<dynamic>? sharedWith,
  }) {
    this.sharedWith = sharedWith == null ? [] : [...sharedWith];
  }

  factory PhotoMemo.fromFirestoreDoc({
    required Map<String, dynamic> doc,
    required String docId,
  }) {
    return PhotoMemo(
      docId: docId,
      createdBy: doc[DocKeyPhotoMemo.createdBy.name] ?? '',
      title: doc[DocKeyPhotoMemo.title.name] ?? '',
      memo: doc[DocKeyPhotoMemo.memo.name] ?? '',
      photoFilename: doc[DocKeyPhotoMemo.photoFilename.name] ?? '',
      photoURL: doc[DocKeyPhotoMemo.photoURL.name] ?? '',
      sharedWith: doc[DocKeyPhotoMemo.sharedWith.name] ?? [],
      timestamp: doc[DocKeyPhotoMemo.timestamp.name] != null
         ?DateTime.fromMillisecondsSinceEpoch(
          doc[DocKeyPhotoMemo.timestamp.name].millisecondsSinceEpoch
         )
         : null,
    );
  }

  Map<String, dynamic> toFirestoreDoc() {
    return {
      DocKeyPhotoMemo.title.name: title,
      DocKeyPhotoMemo.createdBy.name: createdBy,
      DocKeyPhotoMemo.memo.name: memo,
      DocKeyPhotoMemo.photoFilename.name: photoFilename,
      DocKeyPhotoMemo.photoURL.name: photoURL,
      DocKeyPhotoMemo.timestamp.name: timestamp,
      DocKeyPhotoMemo.sharedWith.name: sharedWith,
    };
  }

  static String? validateTitle(String? value) {
    return value == null || value.trim().length < 2 ? 'Title too short' : null;
  }

  static String? validateMemo(String? value) {
    return value == null || value.trim().length < 7 ? 'Memo too short' : null;
  }

  static String? validateSharedWith(String? value) {
    if (value == null || value.trim().isEmpty) return null;

    List<String> emailList =
        value.trim().split(RegExp('(,|;| ) +')).map((e) => e.trim()).toList();
    for (String e in emailList) {
      if (!(e.contains('@') && e.contains('.'))) {
        return 'Invalid email address; comma, semicolan, space separated list';
      }
    }
    return null;
  }
}